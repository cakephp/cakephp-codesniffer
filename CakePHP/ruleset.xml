<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="CakePHP">
    <description>CakePHP coding standard</description>

    <config name="installed_paths" value="../../slevomat/coding-standard,../../../slevomat/coding-standard,../vendor/slevomat/coding-standard"/>

    <exclude-pattern>\.git</exclude-pattern>
    <exclude-pattern>/*/tmp/</exclude-pattern>
    <exclude-pattern>tests/*/templates/*</exclude-pattern>

    <rule ref="PSR2"/>
    <rule ref="PSR12"/>

    <rule ref="PSR12.Files.FileHeader.SpacingAfterBlock">
        <severity>0</severity>
    </rule>
    <rule ref="PSR12.Files.FileHeader.IncorrectOrder">
        <severity>0</severity>
    </rule>

    <!--
    These are contradictory to PSR12
    -->
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterSecond">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterFirst">
        <severity>0</severity>
    </rule>

    <!--
    Property and method names with underscore prefix are allowed in CakePHP.
    Not using underscore prefix is a recommendation of PSR2, not a requirement.
    -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <severity>0</severity>
    </rule>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidFunctionName.PublicUnderscore">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidFunctionName.PublicUnderscore">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName"/>
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.StringVarContainsNumbers">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.MemberVarContainsNumbers">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.NotCamelCaps">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.MemberVarNotCamelCaps">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Generic.Formatting.NoSpaceAfterCast"/>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <rule ref="Squiz.Classes.ClassFileName"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>

    <!--
    Ignore docblock comments and line length related rules in test files.
    -->
    <rule ref="CakePHP.Commenting.FunctionComment">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="ignoreComments" value="true"/>
        </properties>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <!-- Relax some src/* and tests/* rules -->
    <rule ref="PSR1.Files.SideEffects">
        <exclude-pattern>*/config/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="PSR1.Methods.CamelCapsMethodName">
        <exclude-pattern>*/src/Controller/*</exclude-pattern>
        <exclude-pattern>*/src/Command/*</exclude-pattern>
        <exclude-pattern>*/src/Shell/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" type="boolean" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
    <rule ref="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0" />
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1" />
            <property name="linesCountBetweenDifferentAnnotationsTypes" value="0" />
            <property name="linesCountBetweenAnnotationsGroups" value="0" />
            <property name="linesCountAfterLastContent" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration">
        <properties>
            <property name="allowDocCommentAboveReturn" type="boolean" value="true" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration.NoAssignment">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <exclude-pattern>*/templates/*</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountAfterDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="1"/>
        </properties>
        <exclude-pattern>*/config/*</exclude-pattern>
        <exclude-pattern>*/templates/*</exclude-pattern>
        <exclude-pattern>*/tests/Fixture/*</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>

    <!-- All rules in ./Sniffs are included automatically -->
</ruleset>
