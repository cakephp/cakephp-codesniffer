<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="CakePHP">
    <description>CakePHP coding standard</description>

    <config name="installed_paths" value="../../slevomat/coding-standard,../../../slevomat/coding-standard,../vendor/slevomat/coding-standard" />

    <exclude-pattern>\.git</exclude-pattern>
    <exclude-pattern>/*/tmp/</exclude-pattern>
    <exclude-pattern>tests/*/templates/*</exclude-pattern>

    <rule ref="PSR2" />
    <rule ref="PSR12" />

    <!--
    Property and method names with underscore prefix are allowed in CakePHP.
    Not using underscore prefix is a recommendation of PSR2, not a requirement.
    -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <severity>0</severity>
    </rule>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidFunctionName.PublicUnderscore">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidFunctionName.PublicUnderscore">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName" />
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.StringVarContainsNumbers">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.MemberVarContainsNumbers">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.NotCamelCaps">
        <severity>0</severity>
    </rule>
    <rule ref="Zend.NamingConventions.ValidVariableName.MemberVarNotCamelCaps">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false" />
        </properties>
    </rule>

    <!--
    Temporarily ignore until API docblock formatting and line length issues in core code are fixed.
    -->
    <rule ref="CakePHP.Commenting.FunctionComment" />
    <rule ref="CakePHP.Commenting.FunctionComment.ParamCommentNotCapital">
        <severity>0</severity>
    </rule>
    <rule ref="CakePHP.Commenting.FunctionComment.ParamCommentFullStop">
        <severity>0</severity>
    </rule>
    <rule ref="CakePHP.Commenting.FunctionComment.ThrowsNotCapital">
        <severity>0</severity>
    </rule>
    <rule ref="CakePHP.Commenting.FunctionComment.ThrowsNoFullStop">
        <severity>0</severity>
    </rule>
    <rule ref="CakePHP.Commenting.FunctionComment.EmptyThrows">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="ignoreComments" value="true" />
        </properties>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />
    <rule ref="Squiz.Classes.LowercaseClassKeywords" />
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <rule ref="Squiz.Commenting.DocCommentAlignment" />
    <rule ref="Generic.Formatting.NoSpaceAfterCast" />
    <rule ref="Squiz.Operators.ValidLogicalOperators" />
    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops" />
    <rule ref="Squiz.PHP.Eval" />
    <rule ref="Generic.PHP.ForbiddenFunctions" />
    <rule ref="Squiz.PHP.NonExecutableCode" />
    <rule ref="Generic.PHP.NoSilencedErrors" />
    <rule ref="Squiz.Scope.MemberVarScope" />
    <rule ref="Squiz.Scope.StaticThisUsage" />
    <rule ref="Squiz.WhiteSpace.CastSpacing" />
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace" />
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1" />
        </properties>
    </rule>

    <!-- Relax some src/* and tests/* rules -->
    <rule ref="PSR1.Files.SideEffects">
        <exclude-pattern>*/config/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="PSR1.Classes.ClassDeclaration">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="PSR1.Methods.CamelCapsMethodName">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidClassName">
        <exclude-pattern>*/CakePHP/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="Squiz.Classes.ValidClassName">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="CakePHP.Commenting.FunctionComment">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidFunctionName">
        <exclude-pattern>*/src/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <exclude-pattern>*/src/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidFunctionName">
        <exclude-pattern>*/src/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference" />
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements" />
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" type="boolean" value="true" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition" />
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration" />
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
    <rule ref="SlevomatCodingStandard.PHP.TypeCast" />
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />    
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes" >
        <properties>
            <property name="newlinesCountAfterDeclare" value="1" />
            <property name="spacesCountAroundEqualsSign" value="0" />
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="1" />
        </properties>
        <exclude-pattern>*/config/*</exclude-pattern>
        <exclude-pattern>*/tests/Fixture/*</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />
    <rule ref="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0" />
            <property name="linesCountBeforeClosingBrace" value="0" />
        </properties>
    </rule>

    <!-- All rules in ./Sniffs are included automatically -->
</ruleset>
