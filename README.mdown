CakePHP Code Sniffer [![Build Status](https://travis-ci.org/cakephp/cakephp-codesniffer.png?branch=master)](http://travis-ci.org/cakephp/cakephp-codesniffer)
====================

This code works with [phpcs](http://pear.php.net/manual/en/package.php.php-codesniffer.php)
and checks code against the coding standards used in CakePHP.

Installation
------------

Its generally recommended to install these code sniffs with the PEAR
installer:

	pear channel-discover pear.cakephp.org
	pear install cakephp/CakePHP_CodeSniffer

You can also install the code sniffs with `composer`:

	php composer.phar require cakephp/cakephp-codesniffer

Usage
-----

Depending on how you installed the code sniffer changes how you run it. If you have
installed phpcs, and this package with PEAR, you can do the following:

	phpcs --standard=CakePHP /path/to/code

*Warning* when these sniffs are installed with composer, you cannot use them as installed because
of how phpcs handles classnames. It is advised that you copy these sniffs into phpcs:

	cp -R vendor/cakephp/cakephp-codesniffer vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/CakePHP

Once the standard has been put where phpcs can find it, you can run phpcs using:

	vendor/bin/phpcs --standard=CakePHP

Contributing
------------

If you'd like to contribute to the Code Sniffer, you can fork the project add features and send pull requests.

Make sure to clone the repository to something like **cakephp_codesniffer** (instead of the default **cakephp-codesniffer**) because otherwise `phpunit` will fail to run the tests.

Releasing CakePHP Code Sniffer
==============================

* Update version number in build.xml
* Add changelog entry.
* Commit changes.
* Create git tag.
* Run `phing release`
